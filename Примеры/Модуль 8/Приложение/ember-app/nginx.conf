worker_processes auto;

error_log stderr crit;

events {
    worker_connections 4000;
    use epoll;
    multi_accept on;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    access_log /dev/stdout;

    # copies data between one FD and other from within the kernel
    # faster than read() + write()
    sendfile on;
    
    # send headers in one piece, it is better than sending them one by one
    tcp_nopush on;

    # don't buffer data sent, good for small data bursts in real time
    tcp_nodelay on;

    # allow the server to close connection on non responding client, this will free up memory
    reset_timedout_connection on;

    # request timed out -- default 60
    client_body_timeout 10;

    # if client stop responding, free up memory -- default 60
    send_timeout 2;

    # server will close connection after this time -- default 75
    keepalive_timeout 60;

    # number of requests client can make over keep-alive -- for testing environment
    keepalive_requests 100000;

    # cache informations about FDs, frequently accessed files
    # can boost performance, but you need to test those values
    open_file_cache max=200000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;

    server {
        client_max_body_size 100m;
        listen       80;
        server_name  localhost;

        location / {
           root /app;
           index index.html;
           try_files $uri $uri/ /index.html;
        }
    }
}